/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.amazonaws.athena.connector.lambda.domain.predicate;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Constraints extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4863878823989799382L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Constraints\",\"namespace\":\"com.amazonaws.athena.connector.lambda.domain.predicate\",\"fields\":[{\"name\":\"limit\",\"type\":\"long\",\"default\":-1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Constraints> ENCODER =
      new BinaryMessageEncoder<Constraints>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Constraints> DECODER =
      new BinaryMessageDecoder<Constraints>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Constraints> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Constraints> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Constraints> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Constraints>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Constraints to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Constraints from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Constraints instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Constraints fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long limit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Constraints() {}

  /**
   * All-args constructor.
   * @param limit The new value for limit
   */
  public Constraints(java.lang.Long limit) {
    this.limit = limit;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return limit;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: limit = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'limit' field.
   * @return The value of the 'limit' field.
   */
  public long getLimit() {
    return limit;
  }


  /**
   * Sets the value of the 'limit' field.
   * @param value the value to set.
   */
  public void setLimit(long value) {
    this.limit = value;
  }

  /**
   * Creates a new Constraints RecordBuilder.
   * @return A new Constraints RecordBuilder
   */
  public static com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder newBuilder() {
    return new com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder();
  }

  /**
   * Creates a new Constraints RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Constraints RecordBuilder
   */
  public static com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder newBuilder(com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder other) {
    if (other == null) {
      return new com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder();
    } else {
      return new com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder(other);
    }
  }

  /**
   * Creates a new Constraints RecordBuilder by copying an existing Constraints instance.
   * @param other The existing instance to copy.
   * @return A new Constraints RecordBuilder
   */
  public static com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder newBuilder(com.amazonaws.athena.connector.lambda.domain.predicate.Constraints other) {
    if (other == null) {
      return new com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder();
    } else {
      return new com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder(other);
    }
  }

  /**
   * RecordBuilder for Constraints instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Constraints>
    implements org.apache.avro.data.RecordBuilder<Constraints> {

    private long limit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.limit)) {
        this.limit = data().deepCopy(fields()[0].schema(), other.limit);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing Constraints instance
     * @param other The existing instance to copy.
     */
    private Builder(com.amazonaws.athena.connector.lambda.domain.predicate.Constraints other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.limit)) {
        this.limit = data().deepCopy(fields()[0].schema(), other.limit);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'limit' field.
      * @return The value.
      */
    public long getLimit() {
      return limit;
    }


    /**
      * Sets the value of the 'limit' field.
      * @param value The value of 'limit'.
      * @return This builder.
      */
    public com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder setLimit(long value) {
      validate(fields()[0], value);
      this.limit = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'limit' field has been set.
      * @return True if the 'limit' field has been set, false otherwise.
      */
    public boolean hasLimit() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'limit' field.
      * @return This builder.
      */
    public com.amazonaws.athena.connector.lambda.domain.predicate.Constraints.Builder clearLimit() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Constraints build() {
      try {
        Constraints record = new Constraints();
        record.limit = fieldSetFlags()[0] ? this.limit : (java.lang.Long) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Constraints>
    WRITER$ = (org.apache.avro.io.DatumWriter<Constraints>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Constraints>
    READER$ = (org.apache.avro.io.DatumReader<Constraints>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.limit);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.limit = in.readLong();

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.limit = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










